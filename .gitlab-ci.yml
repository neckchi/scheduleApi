.before_script_terraform: &before_script_terraform
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 -d | tr -d "\r")
  - mkdir -p ~/.ssh
  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  - terraform --version

.before_script_plublish: &before_script_plublish
  - apk update && apk add --update --no-cache --force-overwrite gc-dev pcre-dev libevent-dev git curl
  - curl -LO https://github.com/codacy/git-version/releases/download/2.8.0/git-version 
  - mv git-version /usr/bin
  - chmod +x /usr/bin/git-version
  - curl --location --output /usr/local/bin/release-cli "https://gitlab.com/api/v4/projects/gitlab-org%2Frelease-cli/packages/generic/release-cli/latest/release-cli-linux-amd64"
  - chmod +x /usr/local/bin/release-cli
  - git checkout $CI_COMMIT_BRANCH

.terraform_image: &terraform_image
  name: hashicorp/terraform:light
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

variables:
  PROJECT_NAME: p2p-schedule-api-of-carriers
  REPO_URL: 934536729814.dkr.ecr.eu-central-1.amazonaws.com
  HTTP_PROXY: "http://proxy.eu-central-1.aws.int.kn:80"
  NO_PROXY: "172.20.0.0/16,localhost,127.0.0.1,10.59.244.0/25,169.254.169.254,.internal,s3.amazonaws.com,.s3.eu-central-1.amazonaws.com,api.ecr.eu-central-1.amazonaws.com,.dkr.ecr.eu-central-1.amazonaws.com,.ec2.eu-central-1.amazonaws.com,169.254.170.2,.int.kn,.eks.amazonaws.com,.cluster.local"
  AWS_SDK_LOAD_CONFIG: "true"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POETRY_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pypoetry"
  POETRY_VIRTUALENVS_IN_PROJECT: "true"

cache:
  paths:
    - .cache/pip
    - .cache/pytest_cache
    - .cache/pypoetry
    - .venv

stages:
  - Checks
  - Test
  - GetRC
  - PublishRC
  - PlanDev
  - ApplyDev
  - PlanUat
  - ApplyUat
  - GetRelease
  - PublishRelease
  - PlanPRD
  - ApplyPRD

# Stages Defenition
## Lint
Flake8:
  stage: Checks
  image: python:3.9
  allow_failure: true
  script:
    - python --version
    - pip install flake8
    - flake8 app/

YamlLint:
  stage: Checks
  image: registry.gitlab.com/pipeline-components/yamllint:latest
  allow_failure: true
  script:
    - yamllint .

## Tests
Testing:
  stage: Test
  image:
    name: python:3.8-slim 
  before_script:
    - pip install pytest pytest-cov coverage
    - pip install --no-cache-dir -r requirements.txt
  script:
    - coverage run -m pytest
    - coverage report -m
    - coverage xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    paths:
      - coverage.xml
  allow_failure: true

GetRC:
  stage: GetRC
  image: alpine
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    *before_script_plublish
  tags:
    - dev
  script:
    - export TAG_VERSION_RC=$(git-version -b $CI_COMMIT_BRANCH -r snapshot --minor-identifier "\"/(feat|feature)/\"" --major-identifier "\"/(break|breaking)/\"")
    - echo "ReleaseRC=$TAG_VERSION_RC" >> release.env
    - cat release.env
    - release-cli create --name "Release $CI_COMMIT_MESSAGE" --description "Created by user $CI_COMMIT_AUTHOR" --tag-name "$TAG_VERSION_RC"
  artifacts:
    reports:
      dotenv: release.env

## Pulish Release Candidate
PublishRC:
  stage: PublishRC
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags:
    - dev
  script:
    - echo $ReleaseRC
    - /kaniko/executor
      --context .
      --build-arg HTTP_PROXY=$HTTP_PROXY
      --build-arg HTTPS_PROXY=$HTTP_PROXY
      --build-arg http_proxy=$HTTP_PROXY
      --build-arg https_proxy=$HTTP_PROXY
      --build-arg no_proxy=$NO_PROXY
      --build-arg NO_PROXY=$NO_PROXY
      --dockerfile Dockerfile
      --destination $REPO_URL/$PROJECT_NAME:$ReleaseRC

## Terraform
Validate:
  stage: Checks
  image:
    *terraform_image
  tags:
    - dev
  before_script:
    *before_script_terraform
  script:
    - terraform -chdir=cicd init -backend-config=environments/dev/backend.conf
    - terraform validate

## DEV
PlanDev:
  stage: PlanDev
  image:
    *terraform_image
  tags:
    - dev
  before_script:
    *before_script_terraform
  script:
    - terraform -chdir=cicd init -backend-config=environments/dev/backend.conf
    - terraform -chdir=cicd plan -var-file=environments/dev/dev.tfvars -var="image_tag=$ReleaseRC"

ApplyDev:
  stage: ApplyDev
  image:
    *terraform_image
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags:
    - dev
  before_script:
    *before_script_terraform
  script:
    - terraform -chdir=cicd init -backend-config=environments/dev/backend.conf
    - terraform -chdir=cicd apply -var-file=environments/dev/dev.tfvars -var="image_tag=$ReleaseRC" -auto-approve
  allow_failure: false

## UAT
PlanUat:
  stage: PlanUat
  image:
    *terraform_image
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags:
    - uat
  before_script:
    *before_script_terraform
  script:
    - terraform -chdir=cicd init -backend-config=environments/uat/backend.conf
    - terraform -chdir=cicd plan -var-file=environments/uat/uat.tfvars -var="image_tag=$ReleaseRC"

ApplyUat:
  stage: ApplyUat
  image:
    *terraform_image
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags:
    - uat
  when: manual
  before_script:
    *before_script_terraform
  script:
    - terraform -chdir=cicd init -backend-config=environments/uat/backend.conf
    - terraform -chdir=cicd apply -var-file=environments/uat/uat.tfvars -var="image_tag=$ReleaseRC" -auto-approve
  allow_failure: true

#DestroyDev:
#  stage: DestroyDev_Manual
#  image:
#    *terraform_image
#  rules:
#    - if: $CI_COMMIT_TAG
#      when: never
#    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#  tags:
#    - dev
#  when: manual
#  before_script:
#    *before_script_terraform
#  script:
#    - terraform -chdir=cicd destroy -var-file=environments/dev/dev.tfvars -var="image_tag=$ReleaseRC" -auto-approve

GetRelease:
  stage: GetRelease
  image: alpine
  #rules:
  #  - if: $CI_COMMIT_TAG
  #    when: never
  #  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    *before_script_plublish
  tags:
    - dev
  script:
    - export TAG_VERSION=$(git-version -b $CI_COMMIT_BRANCH --minor-identifier "\"/(feat|feature)/\"" --major-identifier "\"/(break|breaking)/\"")
    - echo "Release=$TAG_VERSION" >> release.env
    - cat release.env
    - release-cli create --name "Release $CI_COMMIT_MESSAGE" --description "Created by user $CI_COMMIT_AUTHOR" --tag-name "$TAG_VERSION"
  artifacts:
    reports:
      dotenv: release.env

## Pulish Release Candidate
PublishRelease:
  stage: PublishRelease
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  #rules:
  #  - if: $CI_COMMIT_TAG
  #    when: never
  #  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags:
    - dev
  script:
    - echo $Release
    - /kaniko/executor
      --context .
      --build-arg HTTP_PROXY=$HTTP_PROXY
      --build-arg HTTPS_PROXY=$HTTP_PROXY
      --build-arg http_proxy=$HTTP_PROXY
      --build-arg https_proxy=$HTTP_PROXY
      --build-arg no_proxy=$NO_PROXY
      --build-arg NO_PROXY=$NO_PROXY
      --dockerfile Dockerfile
      --destination $REPO_URL/$PROJECT_NAME:$Release

## PRD
PlanPRD:
  stage: PlanPRD
  image:
    *terraform_image
  rules:
  #  - if: $CI_COMMIT_TAG
  #    when: never
  #  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags:
    - production
  before_script:
    *before_script_terraform
  script:
    - terraform -chdir=cicd init -backend-config=environments/prod/backend.conf
    - terraform -chdir=cicd plan -var-file=environments/prod/prod.tfvars -var="image_tag=$Release"

ApplyPRD:
  stage: ApplyPRD
  image:
    *terraform_image
  #rules:
  #  - if: $CI_COMMIT_TAG
  #    when: never
  #  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags:
    - production
  when: manual
  before_script:
    *before_script_terraform
  script:
    - terraform -chdir=cicd init -backend-config=environments/prod/backend.conf
    - terraform -chdir=cicd apply -var-file=environments/prod/prod.tfvars -var="image_tag=$Release" --auto-approve
