.before_script_terraform: &before_script_terraform
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 -d | tr -d "\r")
  - mkdir -p ~/.ssh
  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  - terraform --version
  - terraform -chdir=cicd init -backend-config=environments/dev/backend.conf
.terraform_image: &terraform_image
  name: hashicorp/terraform:light
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
.poetry_setup: &poetry_setup
  before_script:
    - python -V
    - python -m pip install --upgrade pip
    - python -m pip install pipx
    - python -m pipx install poetry==1.4.0
    - export PATH=$PATH:$HOME/.local/bin
    - poetry install

variables:
  PROJECT_NAME: p2p-schedule-api-of-carriers
  REPO_URL: 934536729814.dkr.ecr.eu-central-1.amazonaws.com
  HTTP_PROXY: "http://proxy.eu-central-1.aws.int.kn:80"
  NO_PROXY: "172.20.0.0/16,localhost,127.0.0.1,10.59.244.0/25,169.254.169.254,.internal,s3.amazonaws.com,.s3.eu-central-1.amazonaws.com,api.ecr.eu-central-1.amazonaws.com,.dkr.ecr.eu-central-1.amazonaws.com,.ec2.eu-central-1.amazonaws.com,169.254.170.2,.int.kn,.eks.amazonaws.com,.cluster.local"
  AWS_SDK_LOAD_CONFIG: "true"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POETRY_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pypoetry"
  POETRY_VIRTUALENVS_IN_PROJECT: "true"

cache:
  paths:
    - .cache/pip
    - .cache/pytest_cache
    - .cache/pypoetry
    - .venv

stages:
  - Lint
  - Build
  - Test
  - Validate
  - PlanDev
  - ApplyDev
  - DestroyDev_Manual

# Stages Defenition
## Lint
Flake8:
  stage: Lint
  image: python:3.9
  allow_failure: true
  script:
    - python --version
    - pip install flake8
    - flake8 app/
YamlLint:
  stage: Lint
  image: registry.gitlab.com/pipeline-components/yamllint:latest
  allow_failure: true
  script:
    - yamllint .
## Tests
Testing:
  <<: *poetry_setup
  stage: Test
  allow_failure: true
  script:
    - poetry run coverage run
    - poetry run coverage report
    - poetry run coverage xml
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    # https://docs.gitlab.com/ee/ci/yaml/index.html#artifactsexpire_in
    expire_in: 1 week
    # https://docs.gitlab.com/ee/ci/testing/test_coverage_visualization.html
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
## Build
Build:
  stage: Build
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  tags:
    - dev
  script:
    - /kaniko/executor
      --context .
      --build-arg HTTP_PROXY=$HTTP_PROXY
      --build-arg HTTPS_PROXY=$HTTP_PROXY
      --build-arg http_proxy=$HTTP_PROXY
      --build-arg https_proxy=$HTTP_PROXY
      --build-arg no_proxy=$NO_PROXY
      --build-arg NO_PROXY=$NO_PROXY
      --dockerfile Dockerfile
      --destination $REPO_URL/$PROJECT_NAME:latest
## Terraform
Validate:
  stage: Validate
  image:
    *terraform_image
  tags:
    - dev
  before_script:
    *before_script_terraform
  script:
    - terraform validate
PlanDev:
  stage: PlanDev
  image:
    *terraform_image
  tags:
    - dev
  before_script:
    *before_script_terraform
  script:
    - terraform -chdir=cicd plan -var-file=environments/dev/dev.tfvars -var="image_tag=latest"
ApplyDev:
  stage: ApplyDev
  image:
    *terraform_image
  tags:
    - dev
  when: manual
  before_script:
    *before_script_terraform
  script:
    - terraform -chdir=cicd apply -var-file=environments/dev/dev.tfvars -var="image_tag=latest" -auto-approve
  allow_failure: true
DestroyDev:
  stage: DestroyDev_Manual
  image:
    *terraform_image
  tags:
    - dev
  when: manual
  before_script:
    *before_script_terraform
  script:
    - terraform -chdir=cicd destroy -var-file=environments/dev/dev.tfvars -var="image_tag=latest" -auto-approve
