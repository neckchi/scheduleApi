# Global Definitions
.before_script_terraform: &before_script_terraform
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 -d | tr -d "\r")
  - mkdir -p ~/.ssh
  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  - terraform --version

.before_script_publish: &before_script_publish
  - apk update && apk add --update --no-cache --force-overwrite gc-dev pcre-dev libevent-dev git curl
  - curl -LO https://github.com/codacy/git-version/releases/download/2.8.0/git-version
  - mv git-version /usr/bin
  - chmod +x /usr/bin/git-version
  - curl --location --output /usr/local/bin/release-cli "https://gitlab.com/api/v4/projects/gitlab-org%2Frelease-cli/packages/generic/release-cli/latest/release-cli-linux-amd64"
  - chmod +x /usr/local/bin/release-cli
  - git checkout $CI_COMMIT_BRANCH

.terraform_image: &terraform_image
  name: hashicorp/terraform:1.9.3
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

variables:
  PROJECT_NAME: p2p-schedule-api-of-carriers
  REPO_URL: 934536729814.dkr.ecr.eu-central-1.amazonaws.com
  HTTP_PROXY: "http://proxy.eu-central-1.aws.int.kn:80"
  NO_PROXY: "172.20.0.0/16,localhost,127.0.0.1,10.59.244.0/25,169.254.169.254,.internal,s3.amazonaws.com,.s3.eu-central-1.amazonaws.com,api.ecr.eu-central-1.amazonaws.com,.dkr.ecr.eu-central-1.amazonaws.com,.ec2.eu-central-1.amazonaws.com,169.254.170.2,.int.kn,.eks.amazonaws.com,.cluster.local"
  AWS_SDK_LOAD_CONFIG: "true"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POETRY_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pypoetry"
  POETRY_VIRTUALENVS_IN_PROJECT: "true"
  # Variables for test runs
  BASIC_PW: "mock"
  BASIC_USER: "mock"
  CMA_TOKEN: "mock"
  CMA_URL: "mock"
  HLCU_CLIENT_ID: "mock"
  HLCU_CLIENT_SECRET: "mock"
  HLCU_URL: "mock"
  HMM_TOKEN: "mock"
  HMM_URL: "mock"
  IQAX_TOKEN: "mock"
  IQAX_URL: "mock"
  MAEU_CUTOFF: "mock"
  MAEU_LOCATION: "mock"
  MAEU_P2P: "mock"
  MAEU_TOKEN: "mock"
  MAEU_TOKEN2: "mock"
  MSCU_AUD: "mock"
  MSCU_CLIENT: "mock"
  MSCU_OAUTH: "mock"
  MSCU_RSA_KEY: "mock"
  MSCU_SCOPE: "mock"
  MSCU_THUMBPRINT: "mock"
  MSCU_URL: "mock"
  ONEY_AUTH: "mock"
  ONEY_TOKEN: "mock"
  ONEY_TURL: "mock"
  ONEY_URL: "mock"
  REDIS_HOST: "mock"
  REDIS_PORT: "mock"
  REDIS_DB: "mock"
  REDIS_USER: "mock"
  REDIS_PW: "mock"
  SUDU_TOKEN: "mock"
  SUDU_URL: "mock"
  ZIM_CLIENT: "mock"
  ZIM_SECRET: "mock"
  ZIM_TOKEN: "mock"
  ZIM_TURL: "mock"
  ZIM_URL: "mock"

# Workflow Rules
workflow:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH
      when: always

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cache/pip
    - .cache/pytest_cache
    - .cache/pypoetry
    - .venv
    - cicd/.terraform/
    - cicd/.terraform.lock.hcl

stages:
  - checks
  - test
  - get_rc
  - publish_rc
  - plan_sandbox
  - apply_sandbox
  - plan_dev
  - apply_dev
  - plan_uat
  - apply_uat
  - get_release
  - publish_release
  - plan_production
  - apply_production

# Jobs Definition

# Checks Stage
flake8:
  stage: checks
  image: python:3.10
  script:
    - python --version
    - pip install flake8
    - flake8 app/

yamllint:
  stage: checks
  image: registry.gitlab.com/pipeline-components/yamllint:latest
  allow_failure: true
  script:
    - yamllint .

validate:
  stage: checks
  image: *terraform_image
  before_script:
    *before_script_terraform
  script:
    - terraform -chdir=cicd init -backend-config=environments/sandbox/backend.conf
    - terraform validate
  tags:
    - sandbox

# Test Stage
testing:
  stage: test
  image:
    name: python:3.11-slim
  before_script:
    - pip install pytest pytest-cov coverage
    - pip install --no-cache-dir -r requirements.txt
  script:
    - coverage run -m pytest
    - coverage report -m
    - coverage xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    paths:
      - coverage.xml

# Plan and Apply for Sandbox Environment
plan_sandbox:
  stage: plan_sandbox
  image: *terraform_image
  before_script:
    *before_script_terraform
  script:
    - env | grep -i release
    - terraform -chdir=cicd init -backend-config=environments/sandbox/backend.conf
    - terraform -chdir=cicd plan -var-file=environments/sandbox/sandbox.tfvars -var="image_tag=$ReleaseRC" -out=tfplan
  artifacts:
    paths:
      - cicd/tfplan
      - cicd/lambda/lambda_function.zip
  needs: []
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_COMMIT_BRANCH =~ /^(feature\/|SCHEDU-)/'
  when: manual
  tags:
    - sandbox

apply_sandbox:
  stage: apply_sandbox
  image: *terraform_image
  before_script:
    *before_script_terraform
  script:
    - terraform -chdir=cicd init -backend-config=environments/sandbox/backend.conf
    - terraform -chdir=cicd apply -input=false tfplan
  dependencies:
    - plan_sandbox
  needs:
    - plan_sandbox
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_COMMIT_BRANCH =~ /^(feature\/|SCHEDU-)/'
  when: manual
  tags:
    - sandbox

# Get Release Candidate Stage
get_rc:
  stage: get_rc
  image: alpine
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_COMMIT_BRANCH =~ /^(feature\/|SCHEDU-)/'
  before_script:
    *before_script_publish
  script:
    - |
      if [ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]; then
        export TAG_VERSION_RC=$(git-version -b $CI_COMMIT_BRANCH -r snapshot --minor-identifier "/(feat|feature)/" --major-identifier "/(break|breaking)/")
        echo "ReleaseRC=$TAG_VERSION_RC" >> release.env
        release-cli create --name "Release $CI_COMMIT_MESSAGE" --description "Created by $GITLAB_USER_LOGIN" --tag-name "$TAG_VERSION_RC"
      else
        export TAG_VERSION_RC="${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}"
        echo "ReleaseRC=$TAG_VERSION_RC" >> release.env
      fi
    - echo "ReleaseRC=$ReleaseRC" > release.env
    - cat release.env
  artifacts:
    reports:
      dotenv: release.env
  needs: []
  tags:
    - dev

# Publish Release Candidate Stage
publish_rc:
  stage: publish_rc
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_COMMIT_BRANCH =~ /^(feature\/|SCHEDU-)/'
  script:
    - |
      /kaniko/executor \
        --context . \
        --build-arg HTTP_PROXY=$HTTP_PROXY \
        --build-arg HTTPS_PROXY=$HTTP_PROXY \
        --build-arg http_proxy=$HTTP_PROXY \
        --build-arg https_proxy=$HTTP_PROXY \
        --build-arg no_proxy=$NO_PROXY \
        --build-arg NO_PROXY=$NO_PROXY \
        --dockerfile Dockerfile \
        --destination $REPO_URL/$PROJECT_NAME:$ReleaseRC
    - echo "ReleaseRC=$ReleaseRC" > release.env
    - ls -la
  artifacts:
    reports:
      dotenv: release.env
  needs:
    - get_rc
  tags:
    - dev

# Plan and Apply for Development Environment
plan_dev:
  stage: plan_dev
  image: *terraform_image
  before_script:
    *before_script_terraform
  script:
    - terraform -chdir=cicd init -backend-config=environments/dev/backend.conf
    - terraform -chdir=cicd plan -var-file=environments/dev/dev.tfvars -var="image_tag=$ReleaseRC" -out=tfplan
  artifacts:
    paths:
      - cicd/tfplan
      - cicd/lambda/lambda_function.zip
  needs:
    - publish_rc
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual
  tags:
    - dev

apply_dev:
  stage: apply_dev
  image: *terraform_image
  before_script:
    *before_script_terraform
  script:
    - terraform -chdir=cicd init -backend-config=environments/dev/backend.conf
    - terraform -chdir=cicd apply -input=false tfplan
  dependencies:
    - plan_dev
  needs:
    - plan_dev
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual
  tags:
    - dev

# Plan and Apply for UAT Environment
plan_uat:
  stage: plan_uat
  image: *terraform_image
  before_script:
    *before_script_terraform
  script:
    - terraform -chdir=cicd init -backend-config=environments/uat/backend.conf
    - terraform -chdir=cicd plan -var-file=environments/uat/uat.tfvars -var="image_tag=$ReleaseRC" -out=tfplan
  artifacts:
    paths:
      - cicd/tfplan
      - cicd/lambda/lambda_function.zip
  needs: []
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == "uat"
  when: manual
  tags:
    - uat

apply_uat:
  stage: apply_uat
  image: *terraform_image
  before_script:
    *before_script_terraform
  script:
    - terraform -chdir=cicd init -backend-config=environments/uat/backend.conf
    - terraform -chdir=cicd apply -input=false tfplan
  dependencies:
    - plan_uat
  needs:
    - plan_uat
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == "uat"
  when: manual
  tags:
    - uat

# Get Final Release Stage
get_release:
  stage: get_release
  image: alpine
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == "master"
  before_script:
    *before_script_publish
  script:
    - |
      export TAG_VERSION=$(git-version -b $CI_COMMIT_BRANCH --minor-identifier "/(feat|feature)/" --major-identifier "/(break|breaking)/")
      echo "Release=$TAG_VERSION" >> release.env
      release-cli create --name "Release $CI_COMMIT_MESSAGE" --description "Created by $GITLAB_USER_LOGIN" --tag-name "$TAG_VERSION"
    - echo "Release=$Release" > release.env
    - cat release.env
  artifacts:
    reports:
      dotenv: release.env
  needs: []
  tags:
    - dev

# Publish Final Release Stage
publish_release:
  stage: publish_release
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == "master"
  script:
    - |
      /kaniko/executor \
        --context . \
        --build-arg HTTP_PROXY=$HTTP_PROXY \
        --build-arg HTTPS_PROXY=$HTTP_PROXY \
        --build-arg http_proxy=$HTTP_PROXY \
        --build-arg https_proxy=$HTTP_PROXY \
        --build-arg no_proxy=$NO_PROXY \
        --build-arg NO_PROXY=$NO_PROXY \
        --dockerfile Dockerfile \
        --destination $REPO_URL/$PROJECT_NAME:$Release
    - echo "Release=$Release" > release.env
  artifacts:
    reports:
      dotenv: release.env
  needs:
    - get_release
  tags:
    - dev

# Plan and Apply for Production Environment
plan_production:
  stage: plan_production
  image: *terraform_image
  before_script:
    *before_script_terraform
  script:
    - terraform -chdir=cicd init -backend-config=environments/prod/backend.conf
    - terraform -chdir=cicd plan -var-file=environments/prod/prod.tfvars -var="image_tag=$Release" -out=tfplan
  artifacts:
    paths:
      - cicd/tfplan
      - cicd/lambda/lambda_function.zip
  needs:
    - publish_release
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == "master"
  when: manual
  tags:
    - production

apply_production:
  stage: apply_production
  image: *terraform_image
  before_script:
    *before_script_terraform
  script:
    - terraform -chdir=cicd init -backend-config=environments/prod/backend.conf
    - terraform -chdir=cicd apply -input=false tfplan
  dependencies:
    - plan_production
  needs:
    - plan_production
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == "master"
  when: manual
  tags:
    - production
