# Global Definitions
.before_script_terraform: &before_script_terraform
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 -d | tr -d "\r")
  - mkdir -p ~/.ssh
  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  - terraform --version

.terraform_image: &terraform_image
  name: hashicorp/terraform:1.9.3
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

variables:
  PROJECT_NAME: p2p-schedule-api-of-carriers
  REPO_URL: 934536729814.dkr.ecr.eu-central-1.amazonaws.com
  HTTP_PROXY: "http://proxy.eu-central-1.aws.int.kn:80"
  NO_PROXY: "172.20.0.0/16,localhost,127.0.0.1,10.59.244.0/25,169.254.169.254,.internal,s3.amazonaws.com,.s3.eu-central-1.amazonaws.com,api.ecr.eu-central-1.amazonaws.com,.dkr.ecr.eu-central-1.amazonaws.com,.ec2.eu-central-1.amazonaws.com,169.254.170.2,.int.kn,.eks.amazonaws.com,.cluster.local"
  AWS_SDK_LOAD_CONFIG: "true"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POETRY_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pypoetry"
  POETRY_VIRTUALENVS_IN_PROJECT: "true"
  IMAGE_TAG: $CI_COMMIT_SHORT_SHA

# Workflow Rules
workflow:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH
      when: always

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cache/pip
    - .cache/pytest_cache
    - .cache/pypoetry
    - .venv
    - cicd/.terraform/
    - cicd/.terraform.lock.hcl

stages:
  - checks
  - test
  - build
  - plan
  - deploy

# Jobs Definition

# Checks Stage
flake8:
  stage: checks
  image: python:3.9
  script:
    - python --version
    - pip install flake8
    - flake8 app/

yamllint:
  stage: checks
  image: registry.gitlab.com/pipeline-components/yamllint:latest
  allow_failure: true
  script:
    - yamllint .

validate:
  stage: checks
  image: *terraform_image
  before_script:
    *before_script_terraform
  script:
    - terraform -chdir=cicd init -backend-config=environments/${CI_COMMIT_BRANCH}/backend.conf
    - terraform validate

# Test Stage
testing:
  stage: test
  image:
    name: python:3.8-slim
  before_script:
    - pip install pytest pytest-cov coverage
    - pip install --no-cache-dir -r requirements.txt
  script:
    - coverage run -m pytest
    - coverage report -m
    - coverage xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    paths:
      - coverage.xml

# Build Stage
build_image:
  stage: build
  image:
    name: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - echo "Building Docker image"
    - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD" $REPO_URL
    - docker build -t $REPO_URL/$PROJECT_NAME:$IMAGE_TAG .
    - docker push $REPO_URL/$PROJECT_NAME:$IMAGE_TAG

# Plan Stage
plan_sandbox:
  stage: plan
  image: *terraform_image
  before_script:
    *before_script_terraform
  script:
    - echo "Planning for Sandbox environment"
    - terraform -chdir=cicd init -backend-config=environments/sandbox/backend.conf
    - terraform -chdir=cicd plan -var-file=environments/sandbox/sandbox.tfvars -var="image_tag=$IMAGE_TAG" -out=tfplan
  artifacts:
    paths:
      - cicd/tfplan
  only:
    - sandbox
  needs:
    - build_image
  tags:
    - sandbox

plan_dev:
  stage: plan
  image: *terraform_image
  before_script:
    *before_script_terraform
  script:
    - echo "Planning for Development environment"
    - terraform -chdir=cicd init -backend-config=environments/dev/backend.conf
    - terraform -chdir=cicd plan -var-file=environments/dev/dev.tfvars -var="image_tag=$IMAGE_TAG" -out=tfplan
  artifacts:
    paths:
      - cicd/tfplan
  only:
    - dev
  needs:
    - build_image
  tags:
    - dev

plan_uat:
  stage: plan
  image: *terraform_image
  before_script:
    *before_script_terraform
  script:
    - echo "Planning for UAT environment"
    - terraform -chdir=cicd init -backend-config=environments/uat/backend.conf
    - terraform -chdir=cicd plan -var-file=environments/uat/uat.tfvars -var="image_tag=$IMAGE_TAG" -out=tfplan
  artifacts:
    paths:
      - cicd/tfplan
  only:
    - uat
  needs:
    - build_image
  tags:
    - uat

plan_production:
  stage: plan
  image: *terraform_image
  before_script:
    *before_script_terraform
  script:
    - echo "Planning for Production environment"
    - terraform -chdir=cicd init -backend-config=environments/prod/backend.conf
    - terraform -chdir=cicd plan -var-file=environments/prod/prod.tfvars -var="image_tag=$IMAGE_TAG" -out=tfplan
  artifacts:
    paths:
      - cicd/tfplan
  only:
    - master
  needs:
    - build_image
  tags:
    - production

# Deploy Stage
apply_sandbox:
  stage: deploy
  image: *terraform_image
  before_script:
    *before_script_terraform
  script:
    - echo "Applying for Sandbox environment"
    - terraform -chdir=cicd init -backend-config=environments/sandbox/backend.conf
    - terraform -chdir=cicd apply "tfplan"
  dependencies:
    - plan_sandbox
  only:
    - sandbox
  when: manual
  needs:
    - plan_sandbox
  tags:
    - sandbox

apply_dev:
  stage: deploy
  image: *terraform_image
  before_script:
    *before_script_terraform
  script:
    - echo "Applying for Development environment"
    - terraform -chdir=cicd init -backend-config=environments/dev/backend.conf
    - terraform -chdir=cicd apply "tfplan"
  dependencies:
    - plan_dev
  only:
    - dev
  when: manual
  needs:
    - plan_dev
  tags:
    - dev

apply_uat:
  stage: deploy
  image: *terraform_image
  before_script:
    *before_script_terraform
  script:
    - echo "Applying for UAT environment"
    - terraform -chdir=cicd init -backend-config=environments/uat/backend.conf
    - terraform -chdir=cicd apply "tfplan"
  dependencies:
    - plan_uat
  only:
    - uat
  when: manual
  needs:
    - plan_uat
  tags:
    - uat

apply_production:
  stage: deploy
  image: *terraform_image
  before_script:
    *before_script_terraform
  script:
    - echo "Applying for Production environment"
    - terraform -chdir=cicd init -backend-config=environments/prod/backend.conf
    - terraform -chdir=cicd apply "tfplan"
  dependencies:
    - plan_production
  only:
    - master
  when: manual
  needs:
    - plan_production
  tags:
    - production
